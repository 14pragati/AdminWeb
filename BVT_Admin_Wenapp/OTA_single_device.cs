///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace BVT_Admin_Wenapp
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The OTA_single_device recording.
    /// </summary>
    [TestModule("85b8e422-db07-4e9a-a400-6f463870a199", ModuleType.Recording, 1)]
    public partial class OTA_single_device : ITestModule
    {
        /// <summary>
        /// Holds an instance of the BVT_Admin_WebappRepository repository.
        /// </summary>
        public static BVT_Admin_WebappRepository repo = BVT_Admin_WebappRepository.Instance;

        static OTA_single_device instance = new OTA_single_device();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public OTA_single_device()
        {
            device_type = "";
            device_id = "";
            FW_ver = "";
            JOB_Id = "";
            New_OTA_JOB = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static OTA_single_device Instance
        {
            get { return instance; }
        }

#region Variables

        string _device_type;

        /// <summary>
        /// Gets or sets the value of variable device_type.
        /// </summary>
        [TestVariable("0c0540de-d4c9-4dfa-bc57-9b43642799f6")]
        public string device_type
        {
            get { return _device_type; }
            set { _device_type = value; }
        }

        string _JOB_Id;

        /// <summary>
        /// Gets or sets the value of variable JOB_Id.
        /// </summary>
        [TestVariable("d3d6a0a5-b281-4489-9d81-adf72a342129")]
        public string JOB_Id
        {
            get { return _JOB_Id; }
            set { _JOB_Id = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable url.
        /// </summary>
        [TestVariable("0349e901-4169-4b6d-8d82-bb2facc1de58")]
        public string url
        {
            get { return repo.url; }
            set { repo.url = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable New_OTA_JOB.
        /// </summary>
        [TestVariable("2b46cbad-03bb-4872-acf0-9087e614639e")]
        public string New_OTA_JOB
        {
            get { return repo.New_OTA_JOB; }
            set { repo.New_OTA_JOB = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable device_id.
        /// </summary>
        [TestVariable("47d3c3fc-6129-4cd7-bf2a-e61a12671a0c")]
        public string device_id
        {
            get { return repo.device_id; }
            set { repo.device_id = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable FW_ver.
        /// </summary>
        [TestVariable("a1f71313-ebda-4768-b3af-72df1c7eb261")]
        public string FW_ver
        {
            get { return repo.FW_ver; }
            set { repo.FW_ver = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 2s.", new RecordItemIndex(0));
                Delay.Duration(2000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.OTAJob' at Center.", repo.AdminWebapp.OTAJobInfo, new RecordItemIndex(1));
                repo.AdminWebapp.OTAJob.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(2));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='div') on item 'AdminWebapp1.Root.ActiveOTAJobs'.", repo.AdminWebapp1.Root.ActiveOTAJobsInfo, new RecordItemIndex(3));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.ActiveOTAJobsInfo, "TagName", "div", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='path') on item 'AdminWebapp1.Root.Path'.", repo.AdminWebapp1.Root.PathInfo, new RecordItemIndex(4));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.PathInfo, "TagName", "path", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='button') on item 'AdminWebapp1.Root.CREATEOTAJOB'.", repo.AdminWebapp1.Root.CREATEOTAJOBInfo, new RecordItemIndex(5));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.CREATEOTAJOBInfo, "TagName", "button", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(6));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.CREATEOTAJOB' at 106;15.", repo.AdminWebapp.Root.CREATEOTAJOBInfo, new RecordItemIndex(7));
                repo.AdminWebapp.Root.CREATEOTAJOB.Click("106;15");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 10s.", new RecordItemIndex(8));
                Delay.Duration(10000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            try {
                Report.Log(ReportLevel.Info, "Set value", "(Optional Action)\r\nSetting attribute TagValue to '$device_type' on item 'AdminWebapp.Root.DeviceType1'.", repo.AdminWebapp.Root.DeviceType1Info, new RecordItemIndex(9));
                repo.AdminWebapp.Root.DeviceType1.Element.SetAttributeValue("TagValue", device_type);
                Delay.Milliseconds(20);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(9)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 10s.", new RecordItemIndex(10));
                Delay.Duration(10000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(10)); }
            
            try {
                //Report.Log(ReportLevel.Info, "Set value", "(Optional Action)\r\nSetting attribute TagValue to 'XTR1_1.8' on item 'AdminWebapp.Root.select_fw'.", repo.AdminWebapp.Root.select_fwInfo, new RecordItemIndex(11));
                //repo.AdminWebapp.Root.select_fw.Element.SetAttributeValue("TagValue", "XTR1_1.8");
                //Delay.Milliseconds(20);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(11)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence from variable '$FW_ver' with focus on 'AdminWebapp.Root.select_fw'.", repo.AdminWebapp.Root.select_fwInfo, new RecordItemIndex(12));
                repo.AdminWebapp.Root.select_fw.PressKeys(FW_ver);
                Delay.Milliseconds(20);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 8s.", new RecordItemIndex(13));
                Delay.Duration(8000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence 'OTA' with focus on 'AdminWebapp.Root.EnterNote'.", repo.AdminWebapp.Root.EnterNoteInfo, new RecordItemIndex(14));
                repo.AdminWebapp.Root.EnterNote.PressKeys("OTA");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(15));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence from variable '$device_id' with focus on 'AdminWebapp.Root.Search_device'.", repo.AdminWebapp.Root.Search_deviceInfo, new RecordItemIndex(16));
                repo.AdminWebapp.Root.Search_device.PressKeys(device_id);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(16)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 10s.", new RecordItemIndex(17));
                Delay.Duration(10000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(17)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.Checkmarkk' at Center.", repo.AdminWebapp.Root.CheckmarkkInfo, new RecordItemIndex(18));
                repo.AdminWebapp.Root.Checkmarkk.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(19));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.create_job' at Center.", repo.AdminWebapp.Root.create_jobInfo, new RecordItemIndex(20));
                repo.AdminWebapp.Root.create_job.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(20)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(21));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(21)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(22));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            try {
                Report.Log(ReportLevel.Info, "Get Value", "(Optional Action)\r\nGetting attribute 'InnerText' from item 'AdminWebapp.Root.SomeDivTag' and assigning its value to variable 'JOB_Id'.", repo.AdminWebapp.Root.SomeDivTagInfo, new RecordItemIndex(23));
                JOB_Id = repo.AdminWebapp.Root.SomeDivTag.Element.GetAttributeValueText("InnerText");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(23)); }
            
            try {
                Report.Log(ReportLevel.Info, "User", JOB_Id, new RecordItemIndex(24));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(24)); }
            
            try {
                Report.Log(ReportLevel.Info, "Get Value", "(Optional Action)\r\nGetting attribute 'InnerText' from item 'AdminWebapp.Root.SomeDivTag' and assigning the part of its value captured by ': (.*)' to variable 'New_OTA_JOB'.", repo.AdminWebapp.Root.SomeDivTagInfo, new RecordItemIndex(25));
                New_OTA_JOB = repo.AdminWebapp.Root.SomeDivTag.Element.GetAttributeValueText("InnerText", new Regex(": (.*)"));
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 2s.", new RecordItemIndex(26));
                Delay.Duration(2000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(26)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(27));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(27)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.NEW_OTA_JOB_ID' at Center.", repo.AdminWebapp.Root.NEW_OTA_JOB_IDInfo, new RecordItemIndex(28));
                repo.AdminWebapp.Root.NEW_OTA_JOB_ID.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(28)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 4s.", new RecordItemIndex(29));
                Delay.Duration(4000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(29)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(30));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(30)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.Refresh' at Center.", repo.AdminWebapp.Root.RefreshInfo, new RecordItemIndex(31));
                repo.AdminWebapp.Root.Refresh.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(31)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(32));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(32)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.ExcelDownload' at Center.", repo.AdminWebapp.Root.ExcelDownloadInfo, new RecordItemIndex(33));
                repo.AdminWebapp.Root.ExcelDownload.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(33)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (InnerText>'Excel Downloaded Successf') on item 'AdminWebapp.Root.ExcelDownloadedSuccessfully'.", repo.AdminWebapp.Root.ExcelDownloadedSuccessfullyInfo, new RecordItemIndex(34));
                Validate.AttributeContains(repo.AdminWebapp.Root.ExcelDownloadedSuccessfullyInfo, "InnerText", "Excel Downloaded Successf", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(34)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(35));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(36));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(36)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.Cancel' at Center.", repo.AdminWebapp.Root.CancelInfo, new RecordItemIndex(37));
                repo.AdminWebapp.Root.Cancel.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(38));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(38)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.RadioCustomLabel' at Center.", repo.AdminWebapp.RadioCustomLabelInfo, new RecordItemIndex(39));
                repo.AdminWebapp.RadioCustomLabel.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(39)); }
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence 'cancel' with focus on 'AdminWebapp.FormControlsSelect'.", repo.AdminWebapp.FormControlsSelectInfo, new RecordItemIndex(40));
                repo.AdminWebapp.FormControlsSelect.PressKeys("cancel");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(40)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Confirm' at Center.", repo.AdminWebapp.ConfirmInfo, new RecordItemIndex(41));
                repo.AdminWebapp.Confirm.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(41)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText='Cancelled Job') on item 'AdminWebapp.CancelledJob'.", repo.AdminWebapp.CancelledJobInfo, new RecordItemIndex(42));
                Validate.AttributeEqual(repo.AdminWebapp.CancelledJobInfo, "InnerText", "Cancelled Job", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(42)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 2s.", new RecordItemIndex(43));
                Delay.Duration(2000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(43)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(44));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(44)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.NEW_OTA_JOB_ID' at Center.", repo.AdminWebapp.Root.NEW_OTA_JOB_IDInfo, new RecordItemIndex(45));
                repo.AdminWebapp.Root.NEW_OTA_JOB_ID.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(45)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 4s.", new RecordItemIndex(46));
                Delay.Duration(4000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(46)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(47));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(47)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.ExcelDownload' at Center.", repo.AdminWebapp.Root.ExcelDownloadInfo, new RecordItemIndex(48));
                repo.AdminWebapp.Root.ExcelDownload.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(48)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (InnerText>'Excel Downloaded Successf') on item 'AdminWebapp.Root.ExcelDownloadedSuccessfully'.", repo.AdminWebapp.Root.ExcelDownloadedSuccessfullyInfo, new RecordItemIndex(49));
                Validate.AttributeContains(repo.AdminWebapp.Root.ExcelDownloadedSuccessfullyInfo, "InnerText", "Excel Downloaded Successf", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(49)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 2s.", new RecordItemIndex(50));
                Delay.Duration(2000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(50)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(51));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(51)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.Archive' at Center.", repo.AdminWebapp.Root.ArchiveInfo, new RecordItemIndex(52));
                repo.AdminWebapp.Root.Archive.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(52)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeContains (InnerText>'OTA Archive Successfully') on item 'AdminWebapp.OTAArchiveSuccessfully'.", repo.AdminWebapp.OTAArchiveSuccessfullyInfo, new RecordItemIndex(53));
                Validate.AttributeContains(repo.AdminWebapp.OTAArchiveSuccessfullyInfo, "InnerText", "OTA Archive Successfully", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(53)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 4s.", new RecordItemIndex(54));
                Delay.Duration(4000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(54)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='div') on item 'AdminWebapp1.Root.JobBox'.", repo.AdminWebapp1.Root.JobBoxInfo, new RecordItemIndex(55));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.JobBoxInfo, "TagName", "div", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(55)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.DynamicGroups'.", repo.AdminWebapp1.Root.DynamicGroupsInfo, new RecordItemIndex(56));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.DynamicGroupsInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(56)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.OTAJob'.", repo.AdminWebapp1.Root.OTAJobInfo, new RecordItemIndex(57));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.OTAJobInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(57)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.ActiveOTAJobs1'.", repo.AdminWebapp1.Root.ActiveOTAJobs1Info, new RecordItemIndex(58));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.ActiveOTAJobs1Info, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(58)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='button') on item 'AdminWebapp1.Root.BtnBtnDefault2'.", repo.AdminWebapp1.Root.BtnBtnDefault2Info, new RecordItemIndex(59));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.BtnBtnDefault2Info, "TagName", "button", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(59)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='button') on item 'AdminWebapp1.Root.BtnBtnDefault3'.", repo.AdminWebapp1.Root.BtnBtnDefault3Info, new RecordItemIndex(60));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.BtnBtnDefault3Info, "TagName", "button", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(60)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(61));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(61)); }
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'AdminWebapp.Root.BtnBtnDefault' at Center.", repo.AdminWebapp.Root.BtnBtnDefaultInfo, new RecordItemIndex(62));
                repo.AdminWebapp.Root.BtnBtnDefault.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(62)); }
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 5s.", new RecordItemIndex(63));
                Delay.Duration(5000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(63)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp.Screenshots, false, new RecordItemIndex(64));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(64)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AdminWebapp2.BtnBtnDefault' at Center.", repo.AdminWebapp2.BtnBtnDefaultInfo, new RecordItemIndex(65));
            repo.AdminWebapp2.BtnBtnDefault.Click();
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 2s.", new RecordItemIndex(66));
                Delay.Duration(2000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(66)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", null, false, new RecordItemIndex(67));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(67)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='input') on item 'AdminWebapp1.Root.Text'.", repo.AdminWebapp1.Root.TextInfo, new RecordItemIndex(68));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.TextInfo, "TagName", "input", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(68)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='select') on item 'AdminWebapp1.Root.PType'.", repo.AdminWebapp1.Root.PTypeInfo, new RecordItemIndex(69));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.PTypeInfo, "TagName", "select", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(69)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='input') on item 'AdminWebapp1.Root.Text1'.", repo.AdminWebapp1.Root.Text1Info, new RecordItemIndex(70));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.Text1Info, "TagName", "input", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(70)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='img') on item 'AdminWebapp1.Root.Notes'.", repo.AdminWebapp1.Root.NotesInfo, new RecordItemIndex(71));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.NotesInfo, "TagName", "img", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(71)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.Logic'.", repo.AdminWebapp1.Root.LogicInfo, new RecordItemIndex(72));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.LogicInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(72)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.Note'.", repo.AdminWebapp1.Root.NoteInfo, new RecordItemIndex(73));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.NoteInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(73)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.CreatedBy'.", repo.AdminWebapp1.Root.CreatedByInfo, new RecordItemIndex(74));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.CreatedByInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(74)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.CreatedDate'.", repo.AdminWebapp1.Root.CreatedDateInfo, new RecordItemIndex(75));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.CreatedDateInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(75)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.TotalDevices'.", repo.AdminWebapp1.Root.TotalDevicesInfo, new RecordItemIndex(76));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.TotalDevicesInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(76)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'AdminWebapp2.CREATEDYNAMICGROUP' at Center.", repo.AdminWebapp2.CREATEDYNAMICGROUPInfo, new RecordItemIndex(77));
            repo.AdminWebapp2.CREATEDYNAMICGROUP.Click();
            Delay.Milliseconds(0);
            
            try {
                Report.Log(ReportLevel.Info, "Delay", "(Optional Action)\r\nWaiting for 3s.", new RecordItemIndex(78));
                Delay.Duration(3000, false);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(78)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.DynamicGroup'.", repo.AdminWebapp1.Root.DynamicGroupInfo, new RecordItemIndex(79));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.DynamicGroupInfo, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(79)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='span') on item 'AdminWebapp1.Root.CreateDynamicGroup1'.", repo.AdminWebapp1.Root.CreateDynamicGroup1Info, new RecordItemIndex(80));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.CreateDynamicGroup1Info, "TagName", "span", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(80)); }
            
            try {
                Report.Screenshot(ReportLevel.Info, "User", "", repo.AdminWebapp1.Root.PanelBody3, false, new RecordItemIndex(81));
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(81)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagName='div') on item 'AdminWebapp1.Root.PanelBody3'.", repo.AdminWebapp1.Root.PanelBody3Info, new RecordItemIndex(82));
                Validate.AttributeEqual(repo.AdminWebapp1.Root.PanelBody3Info, "TagName", "div", null, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(82)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
